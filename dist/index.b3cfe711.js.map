{"mappings":"ACEA,YAAY,eAAgB,CAC1B,UAAW,CACT,OAAQ,CACN,MAAO,GACP,QAAS,CACP,OAAQ,CAAA,EACR,WAAY,GACd,CACF,EACA,MAAO,CACL,MAAO,CAAC,SAAU,SAAU,SAAU,SAAS,AACjD,EACA,MAAO,CACL,KAAM,SACN,OAAQ,CACN,MAAO,EACP,MAAO,SACT,EACA,QAAS,CACP,SAAU,EACZ,EACA,MAAO,CACL,IAAK,mEACL,MAAO,GACP,OAAQ,GACV,CACF,EAEA,QAAS,CACP,MAAO,GACP,OAAQ,CAAA,EACR,KAAM,CACJ,OAAQ,CAAA,EACR,MAAO,EACP,YAAa,IACb,KAAM,CAAA,CACR,CACF,EACA,KAAM,CACJ,MAAO,EACP,OAAQ,CAAA,EACR,KAAM,CACJ,OAAQ,CAAA,EACR,MAAO,EACP,SAAU,EACV,KAAM,CAAA,CACR,CACF,EACA,YAAa,CACX,OAAQ,CAAA,EACR,SAAU,IACV,MAAO,UACP,QAAS,GACT,MAAO,CACT,EACA,KAAM,CACJ,OAAQ,CAAA,EACR,MAAO,IACP,UAAW,OACX,OAAQ,CAAA,EACR,SAAU,CAAA,EACV,SAAU,MACV,OAAQ,CAAA,EACR,QAAS,CACP,OAAQ,CAAA,EACR,QAAS,IACT,QAAS,IACX,CACF,CACF,EACA,cAAe,CACb,UAAW,SACX,OAAQ,CACN,QAAS,CACP,OAAQ,CAAA,EACR,KAAM,SACR,EACA,QAAS,CACP,OAAQ,CAAA,EACR,KAAM,MACR,CACF,EACA,MAAO,CACL,QAAS,CACP,SAAU,GACV,SAAU,EACZ,EACA,KAAM,CACJ,aAAc,CAChB,CACF,CACF,EACA,cAAe,CAAA,CACjB,GAEA,MAAM,EAAc,SAAS,gBAAgB,CAAC,iBAG1C,CAAA,EAAY,MAAM,CAAG,GAEvB,EAAY,OAAO,CAAC,AAAC,IACnB,IAEE,EAAQ,AADI,AADK,EACM,YAAY,CAAC,cAClB,KAAK,CAAC,MAEtB,EAAa,GAEjB,AAGA,SAAS,IACP,GAAI,EAAa,EAAM,MAAM,CAAE,CAE7B,IACE,EAAS,AADA,CAAK,CAAC,EAAW,CACZ,KAAK,CAAC,IACpB,EAAQ,CAEV,CAhBe,EAgBJ,WAAW,CAAG,GAGzB,EAAO,OAAO,CAAC,AAAC,IAMd,AAzBa,EAyBF,SAAS,EAAI,CAAC,MAAM,EAHjB,AAAW,MAAX,EAAiB,SAAW,EAGD,OAAO,CAAC,AACnD,GAEA,IAAI,EAAQ,AA5BG,EA4BQ,UAAU,CAG3B,EAAiB,YAEvB,WACE,CAAK,CAAC,EAAM,CAAC,SAAS,CAAC,GAAG,CAAC,YAGvB,IAAU,EAAM,MAAM,GACxB,cAAc,GAGd,WAAW,KAQb,IAAI,EAAA,EAAiB,YAGrB,WACE,CAAK,CAAC,EAAM,CAAC,SAAS,CAAC,MAAM,CAAC,UAGhB,MAAV,IACF,cAAc,GACd,IAGA,IAEJ,EAd+C,IAC/C,GAPE,EAAG,KAEP,EAdiD,GAkCnD,MAGE,EAAa,EAEb,GAEJ,GACF","sources":["<anon>","src/assets/js/particles.js"],"sourcesContent":["/* ---- particles.js config ---- */ particlesJS(\"particles-js\", {\n    particles: {\n        number: {\n            value: 80,\n            density: {\n                enable: true,\n                value_area: 750\n            }\n        },\n        color: {\n            value: [\n                \"ADC4CE\",\n                \"96B6C5\",\n                \"CDE8E5\",\n                \"89B9AD\"\n            ]\n        },\n        shape: {\n            type: \"circle\",\n            stroke: {\n                width: 3,\n                color: \"#F6F4EB\"\n            },\n            polygon: {\n                nb_sides: 10\n            },\n            image: {\n                src: \"https://cdn.freebiesupply.com/logos/large/2x/slack-logo-icon.png\",\n                width: 10,\n                height: 100\n            }\n        },\n        opacity: {\n            value: 10,\n            random: false,\n            anim: {\n                enable: false,\n                speed: 1,\n                opacity_min: 0.01,\n                sync: false\n            }\n        },\n        size: {\n            value: 6,\n            random: true,\n            anim: {\n                enable: false,\n                speed: 1,\n                size_min: 8,\n                sync: false\n            }\n        },\n        line_linked: {\n            enable: true,\n            distance: 100,\n            color: \"#808080\",\n            opacity: 0.5,\n            width: 1\n        },\n        move: {\n            enable: true,\n            speed: 1.8,\n            direction: \"none\",\n            random: false,\n            straight: false,\n            out_mode: \"out\",\n            bounce: true,\n            attract: {\n                enable: false,\n                rotateX: 600,\n                rotateY: 1200\n            }\n        }\n    },\n    interactivity: {\n        detect_on: \"window\",\n        events: {\n            onhover: {\n                enable: true,\n                mode: \"repulse\"\n            },\n            onclick: {\n                enable: true,\n                mode: \"push\"\n            }\n        },\n        modes: {\n            repulse: {\n                distance: 70,\n                duration: 0.4\n            },\n            push: {\n                particles_nb: 4\n            }\n        }\n    },\n    retina_detect: true\n});\nconst allElements = document.querySelectorAll(\".animated-text\");\n// It checks if there is at least one element\nif (allElements.length > 0) //It runs the script for each found element\nallElements.forEach((element)=>{\n    const txtElement = element, wordsList = txtElement.getAttribute(\"data-words\"), words = wordsList.split(\", \"); // It makes an array of words from data attribute\n    let wordsCount = 0;\n    entry();\n    // Initial function\n    function entry() {\n        if (wordsCount < words.length) {\n            // It runs the code for each word\n            let word = words[wordsCount], txtArr = word.split(\"\"), count = 0;\n            txtElement.textContent = \"\"; // It removes the previous text from the element\n            // For each letter in the array\n            txtArr.forEach((letter)=>{\n                // It replaces the empty space for the \"non-break-space\" HTML...\n                // ... This is needed to separate the words properly\n                let _letter = letter === \" \" ? \"&nbsp;\" : letter;\n                // It wraps every letter with a \"span\" and puts all they back to the element\n                txtElement.innerHTML += `<span>${_letter}</span>`;\n            });\n            let spans = txtElement.childNodes;\n            // It sets the interval between each letter showing\n            const letterInterval = setInterval(activeLetter, 70);\n            function activeLetter() {\n                spans[count].classList.add(\"active\");\n                count++;\n                if (count === spans.length) {\n                    clearInterval(letterInterval);\n                    // It waits 4 seconds to start erasing the word\n                    setTimeout(()=>{\n                        eraseText();\n                    }, 800);\n                }\n            }\n            function eraseText() {\n                // It sets the interval between each letter hiding\n                let removeInterval = setInterval(removeLetter, 40);\n                count--;\n                function removeLetter() {\n                    spans[count].classList.remove(\"active\");\n                    count--;\n                    if (count === -1) {\n                        clearInterval(removeInterval);\n                        wordsCount++;\n                        // After removing the last letter, call the initial function again\n                        entry();\n                    }\n                }\n            }\n        } else {\n            // If the code reaches the last word\n            // It resets the words counter...\n            wordsCount = 0;\n            // ...and calls the initial function again.\n            entry();\n        }\n    }\n});\n\n//# sourceMappingURL=index.b3cfe711.js.map\n","/* ---- particles.js config ---- */\n\nparticlesJS(\"particles-js\", {\n  particles: {\n    number: {\n      value: 80,\n      density: {\n        enable: true,\n        value_area: 750,\n      },\n    },\n    color: {\n      value: [\"ADC4CE\", \"96B6C5\", \"CDE8E5\", \"89B9AD\"],\n    },\n    shape: {\n      type: \"circle\",\n      stroke: {\n        width: 3,\n        color: \"#F6F4EB\",\n      },\n      polygon: {\n        nb_sides: 10,\n      },\n      image: {\n        src: \"https://cdn.freebiesupply.com/logos/large/2x/slack-logo-icon.png\",\n        width: 10,\n        height: 100,\n      },\n    },\n\n    opacity: {\n      value: 10,\n      random: false,\n      anim: {\n        enable: false,\n        speed: 1,\n        opacity_min: 0.01,\n        sync: false,\n      },\n    },\n    size: {\n      value: 6,\n      random: true,\n      anim: {\n        enable: false,\n        speed: 1,\n        size_min: 8,\n        sync: false,\n      },\n    },\n    line_linked: {\n      enable: true,\n      distance: 100,\n      color: \"#808080\",\n      opacity: 0.5,\n      width: 1,\n    },\n    move: {\n      enable: true,\n      speed: 1.8,\n      direction: \"none\",\n      random: false,\n      straight: false,\n      out_mode: \"out\",\n      bounce: true,\n      attract: {\n        enable: false,\n        rotateX: 600,\n        rotateY: 1200,\n      },\n    },\n  },\n  interactivity: {\n    detect_on: \"window\",\n    events: {\n      onhover: {\n        enable: true,\n        mode: \"repulse\",\n      },\n      onclick: {\n        enable: true,\n        mode: \"push\",\n      },\n    },\n    modes: {\n      repulse: {\n        distance: 70,\n        duration: 0.4,\n      },\n      push: {\n        particles_nb: 4,\n      },\n    },\n  },\n  retina_detect: true,\n});\n\nconst allElements = document.querySelectorAll(\".animated-text\");\n\n// It checks if there is at least one element\nif (allElements.length > 0) {\n  //It runs the script for each found element\n  allElements.forEach((element) => {\n    const txtElement = element,\n      wordsList = txtElement.getAttribute(\"data-words\"),\n      words = wordsList.split(\", \"); // It makes an array of words from data attribute\n\n    let wordsCount = 0;\n\n    entry();\n\n    // Initial function\n    function entry() {\n      if (wordsCount < words.length) {\n        // It runs the code for each word\n        let word = words[wordsCount],\n          txtArr = word.split(\"\"), // It makes an array of letters in the word\n          count = 0;\n\n        txtElement.textContent = \"\"; // It removes the previous text from the element\n\n        // For each letter in the array\n        txtArr.forEach((letter) => {\n          // It replaces the empty space for the \"non-break-space\" HTML...\n          // ... This is needed to separate the words properly\n          let _letter = letter === \" \" ? \"&nbsp;\" : letter;\n\n          // It wraps every letter with a \"span\" and puts all they back to the element\n          txtElement.innerHTML += `<span>${_letter}</span>`;\n        });\n\n        let spans = txtElement.childNodes;\n\n        // It sets the interval between each letter showing\n        const letterInterval = setInterval(activeLetter, 70);\n\n        function activeLetter() {\n          spans[count].classList.add(\"active\");\n          count++;\n\n          if (count === spans.length) {\n            clearInterval(letterInterval);\n\n            // It waits 4 seconds to start erasing the word\n            setTimeout(() => {\n              eraseText();\n            }, 800);\n          }\n        }\n\n        function eraseText() {\n          // It sets the interval between each letter hiding\n          let removeInterval = setInterval(removeLetter, 40);\n          count--;\n\n          function removeLetter() {\n            spans[count].classList.remove(\"active\");\n            count--;\n\n            if (count === -1) {\n              clearInterval(removeInterval);\n              wordsCount++;\n\n              // After removing the last letter, call the initial function again\n              entry();\n            }\n          }\n        }\n      } else {\n        // If the code reaches the last word\n        // It resets the words counter...\n        wordsCount = 0;\n        // ...and calls the initial function again.\n        entry();\n      }\n    }\n  });\n}"],"names":["particlesJS","particles","number","value","density","enable","value_area","color","shape","type","stroke","width","polygon","nb_sides","image","src","height","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","modes","repulse","duration","push","particles_nb","retina_detect","allElements","document","querySelectorAll","length","forEach","element","words","wordsList","txtElement","getAttribute","split","wordsCount","entry","txtArr","word","count","textContent","letter","innerHTML","spans","childNodes","letterInterval","setInterval","classList","add","clearInterval","setTimeout","removeInterval","remove"],"version":3,"file":"index.b3cfe711.js.map"}