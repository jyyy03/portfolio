{"mappings":"AAAA,iCAAiC,GAEjC,YAAY,gBAAgB;IAC1B,WAAW;QACT,QAAQ;YACN,OAAO;YACP,SAAS;gBACP,QAAQ;gBACR,YAAY;YACd;QACF;QACA,OAAO;YACL,OAAO;gBAAC;gBAAU;gBAAU;gBAAU;aAAS;QACjD;QACA,OAAO;YACL,MAAM;YACN,QAAQ;gBACN,OAAO;gBACP,OAAO;YACT;YACA,SAAS;gBACP,UAAU;YACZ;YACA,OAAO;gBACL,KAAK;gBACL,OAAO;gBACP,QAAQ;YACV;QACF;QAEA,SAAS;YACP,OAAO;YACP,QAAQ;YACR,MAAM;gBACJ,QAAQ;gBACR,OAAO;gBACP,aAAa;gBACb,MAAM;YACR;QACF;QACA,MAAM;YACJ,OAAO;YACP,QAAQ;YACR,MAAM;gBACJ,QAAQ;gBACR,OAAO;gBACP,UAAU;gBACV,MAAM;YACR;QACF;QACA,aAAa;YACX,QAAQ;YACR,UAAU;YACV,OAAO;YACP,SAAS;YACT,OAAO;QACT;QACA,MAAM;YACJ,QAAQ;YACR,OAAO;YACP,WAAW;YACX,QAAQ;YACR,UAAU;YACV,UAAU;YACV,QAAQ;YACR,SAAS;gBACP,QAAQ;gBACR,SAAS;gBACT,SAAS;YACX;QACF;IACF;IACA,eAAe;QACb,WAAW;QACX,QAAQ;YACN,SAAS;gBACP,QAAQ;gBACR,MAAM;YACR;YACA,SAAS;gBACP,QAAQ;gBACR,MAAM;YACR;QACF;QACA,OAAO;YACL,SAAS;gBACP,UAAU;gBACV,UAAU;YACZ;YACA,MAAM;gBACJ,cAAc;YAChB;QACF;IACF;IACA,eAAe;AACjB;AACA,MAAM,cAAc,SAAS,gBAAgB,CAAC;AAE9C,6CAA6C;AAC7C,IAAI,YAAY,MAAM,GAAG,GACvB,2CAA2C;AAC3C,YAAY,OAAO,CAAC,CAAC;IACnB,MAAM,aAAa,SACjB,YAAY,WAAW,YAAY,CAAC,eACpC,QAAQ,UAAU,KAAK,CAAC,OAAO,iDAAiD;IAElF,IAAI,aAAa;IAEjB;IAEA,mBAAmB;IACnB,SAAS;QACP,IAAI,aAAa,MAAM,MAAM,EAAE;YAC7B,iCAAiC;YACjC,IAAI,OAAO,KAAK,CAAC,WAAW,EAC1B,SAAS,KAAK,KAAK,CAAC,KACpB,QAAQ;YAEV,WAAW,WAAW,GAAG,IAAI,gDAAgD;YAE7E,+BAA+B;YAC/B,OAAO,OAAO,CAAC,CAAC;gBACd,gEAAgE;gBAChE,oDAAoD;gBACpD,IAAI,UAAU,WAAW,MAAM,WAAW;gBAE1C,4EAA4E;gBAC5E,WAAW,SAAS,IAAI,CAAC,MAAM,EAAE,QAAQ,OAAO,CAAC;YACnD;YAEA,IAAI,QAAQ,WAAW,UAAU;YAEjC,mDAAmD;YACnD,MAAM,iBAAiB,YAAY,cAAc;YAEjD,SAAS;gBACP,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;gBAC3B;gBAEA,IAAI,UAAU,MAAM,MAAM,EAAE;oBAC1B,cAAc;oBAEd,+CAA+C;oBAC/C,WAAW;wBACT;oBACF,GAAG;gBACL;YACF;YAEA,SAAS;gBACP,kDAAkD;gBAClD,IAAI,iBAAiB,YAAY,cAAc;gBAC/C;gBAEA,SAAS;oBACP,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;oBAC9B;oBAEA,IAAI,UAAU,IAAI;wBAChB,cAAc;wBACd;wBAEA,kEAAkE;wBAClE;oBACF;gBACF;YACF;QACF,OAAO;YACL,oCAAoC;YACpC,iCAAiC;YACjC,aAAa;YACb,2CAA2C;YAC3C;QACF;IACF;AACF","sources":["src/assets/particles.js"],"sourcesContent":["/* ---- particles.js config ---- */\n\nparticlesJS(\"particles-js\", {\n  particles: {\n    number: {\n      value: 55,\n      density: {\n        enable: true,\n        value_area: 750,\n      },\n    },\n    color: {\n      value: [\"ADC4CE\", \"96B6C5\", \"CDE8E5\", \"89B9AD\"],\n    },\n    shape: {\n      type: \"circle\",\n      stroke: {\n        width: 3,\n        color: \"#F6F4EB\",\n      },\n      polygon: {\n        nb_sides: 5,\n      },\n      image: {\n        src: \"https://cdn.freebiesupply.com/logos/large/2x/slack-logo-icon.png\",\n        width: 10,\n        height: 100,\n      },\n    },\n\n    opacity: {\n      value: 10,\n      random: false,\n      anim: {\n        enable: false,\n        speed: 1,\n        opacity_min: 0.01,\n        sync: false,\n      },\n    },\n    size: {\n      value: 6,\n      random: true,\n      anim: {\n        enable: false,\n        speed: 1,\n        size_min: 5,\n        sync: false,\n      },\n    },\n    line_linked: {\n      enable: true,\n      distance: 100,\n      color: \"#808080\",\n      opacity: 0.5,\n      width: 1,\n    },\n    move: {\n      enable: true,\n      speed: 1.8,\n      direction: \"none\",\n      random: false,\n      straight: false,\n      out_mode: \"out\",\n      bounce: true,\n      attract: {\n        enable: false,\n        rotateX: 600,\n        rotateY: 1200,\n      },\n    },\n  },\n  interactivity: {\n    detect_on: \"window\",\n    events: {\n      onhover: {\n        enable: true,\n        mode: \"repulse\",\n      },\n      onclick: {\n        enable: true,\n        mode: \"push\",\n      },\n    },\n    modes: {\n      repulse: {\n        distance: 70,\n        duration: 0.4,\n      },\n      push: {\n        particles_nb: 4,\n      },\n    },\n  },\n  retina_detect: true,\n});\nconst allElements = document.querySelectorAll(\".animated-text\");\n\n// It checks if there is at least one element\nif (allElements.length > 0) {\n  //It runs the script for each found element\n  allElements.forEach((element) => {\n    const txtElement = element,\n      wordsList = txtElement.getAttribute(\"data-words\"),\n      words = wordsList.split(\", \"); // It makes an array of words from data attribute\n\n    let wordsCount = 0;\n\n    entry();\n\n    // Initial function\n    function entry() {\n      if (wordsCount < words.length) {\n        // It runs the code for each word\n        let word = words[wordsCount],\n          txtArr = word.split(\"\"), // It makes an array of letters in the word\n          count = 0;\n\n        txtElement.textContent = \"\"; // It removes the previous text from the element\n\n        // For each letter in the array\n        txtArr.forEach((letter) => {\n          // It replaces the empty space for the \"non-break-space\" HTML...\n          // ... This is needed to separate the words properly\n          let _letter = letter === \" \" ? \"&nbsp;\" : letter;\n\n          // It wraps every letter with a \"span\" and puts all they back to the element\n          txtElement.innerHTML += `<span>${_letter}</span>`;\n        });\n\n        let spans = txtElement.childNodes;\n\n        // It sets the interval between each letter showing\n        const letterInterval = setInterval(activeLetter, 70);\n\n        function activeLetter() {\n          spans[count].classList.add(\"active\");\n          count++;\n\n          if (count === spans.length) {\n            clearInterval(letterInterval);\n\n            // It waits 4 seconds to start erasing the word\n            setTimeout(() => {\n              eraseText();\n            }, 600);\n          }\n        }\n\n        function eraseText() {\n          // It sets the interval between each letter hiding\n          let removeInterval = setInterval(removeLetter, 40);\n          count--;\n\n          function removeLetter() {\n            spans[count].classList.remove(\"active\");\n            count--;\n\n            if (count === -1) {\n              clearInterval(removeInterval);\n              wordsCount++;\n\n              // After removing the last letter, call the initial function again\n              entry();\n            }\n          }\n        }\n      } else {\n        // If the code reaches the last word\n        // It resets the words counter...\n        wordsCount = 0;\n        // ...and calls the initial function again.\n        entry();\n      }\n    }\n  });\n}"],"names":[],"version":3,"file":"index.22682b27.js.map","sourceRoot":"/__parcel_source_root/"}